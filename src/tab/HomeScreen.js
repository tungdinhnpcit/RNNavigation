import React, { Component } from "react";
import {
  Text,
  View,
  SafeAreaView,
  Image,
  TouchableOpacity,
  ScrollView,
  FlatList,
  Dimensions,
  ActivityIndicator,
  Alert,
  Platform,
  PermissionsAndroid,
  Modal,
  NativeModules,
  requireNativeComponent
} from "react-native";
import AsyncStorage from "@react-native-community/async-storage";
import { CustomHeader } from "../index";
import ControlText from "../component/ControlText";
import { SliderBox } from "react-native-image-slider-box";
const { width } = Dimensions.get("window");
import * as Progress from "react-native-progress";

import Geolocation from "@react-native-community/geolocation";
import OneSignal from "react-native-onesignal";
import AppStyle from "../style";
import { IMAGE } from "../constant/Image";
import PushNotification from "react-native-push-notification";
import axios from "axios";
import debounce from "lodash/debounce";
const ToastExample = NativeModules.ToastExample;
export { ToastExample };
import CustomView from "./CustomView"
//const AppStyle= Platform.OS === "IOS" ? AppStyle: AppStyle

export class HomeScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [],
      city: "HN",
      isShowLoading: false,
      selectedIndex: 0,
      tabIndex: 0,
      latitude: undefined,
      longitude: undefined,
      address: "",
      urlApi: "http://.228192.168.1.227:8090/api/Home/",
      urlImage: "http://.228192.168.1.227:8090",
      isShowModal: false,
      temp: [],
      config: {},
      token: ''
    };
    OneSignal.init("4cf4ecb2-f26f-4e80-b4f4-49c48d27e04d");
    OneSignal.addEventListener("received", this.onReceived);
    OneSignal.addEventListener("opened", this.onOpened);
    OneSignal.addEventListener("ids", this.onIds);
  }

  requestLocationPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
        {
          'title': 'Example App',
          'message': 'Example App access to your location '
        }
      )
      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        console.log("You can use the location")
        // alert("You can use the location");
      } else {
        console.log("location permission denied")
      }
    } catch (err) {
      console.log('requestLocationPermission', JSON.stringify(err))
    }
  }

  async componentDidMount() {
    //ToastExample.show()

    await AsyncStorage.setItem('API', 'http:');
    AsyncStorage.getItem('apiUrl').then((value) => {
      this.setState({
        config: JSON.parse(value)
      });
    });

    try {
      if (Platform.OS === "android") {
        this.requestLocationPermission();
      } else {
        Geolocation.requestAuthorization();
      }

      Geolocation.getCurrentPosition(
        async (position) => {

          if (position) {
            this.setState({
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
            });

            const address = await fetch(
              `https://maps.googleapis.com/maps/api/geocode/json?latlng=${this.state.latitude},${this.state.longitude}&key=AIzaSyDTY8kR_buT28WOpOKtJCbqa8uX5T1ue3s`
            );
            console.log('position', address)
            let json = await address.json();
            if (json.results[0]) {
              this.setState({ address: json.results[0].formatted_address });
            }
          }
        },
        (error) => {
          Alert.alert("Error", JSON.stringify(error))
        },
        { enableHighAccuracy: false, timeout: 20000, maximumAge: 1000 }
      );

      this.loadDataTheLoai();
    } catch (error) {
      console.log('componentDidmount error', JSON.stringify(error));
    }
  }

  onOpened(openResult) {
    console.log("Message: ", openResult.notification.payload.body);
    console.log("Data: ", openResult.notification.payload.additionalData);
    console.log("openResult: ", openResult);
  }

  onReceived(notification) {
    // console.log("Notification received: ", notification);
    PushNotification.localNotification({
      // /* Android Only Properties */
      // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      // ticker: "My Notification Ticker", // (optional)
      // autoCancel: true, // (optional) default: true
      // largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      // smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      // subText: "This is a subText", // (optional) default: none
      // color: "red", // (optional) default: system default
      // vibrate: true, // (optional) default: true
      // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      // group: "group", // (optional) add group to message
      // ongoing: false, // (optional) set whether this is an "ongoing" notification
      // priority: "high", // (optional) set notification priority, default: high
      // visibility: "private", // (optional) set notification visibility, default: private
      // importance: "high", // (optional) set notification importance, default: high

      /* iOS only properties */
      // alertAction: // (optional) default: view
      // category: // (optional) default: null
      // userInfo: // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: notification.payload.title, // (optional)
      message: notification.payload.subtitle, // (required)
      playSound: true, // (optional) default: true
      soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
  }

  onIds(device) {
    console.log("Device info: ", device);
  }

  renderBoSuuTap = () => {
    return (
      <View>

        {/* Bộ sưu tập */}
        <View style={{
          height: 10,
          width: "100%",
          backgroundColor: "#eeeeee",
        }}></View>
        <View style={{ marginTop: 5, marginBottom: 5, width: "100%" }}>
          <TouchableOpacity
            onPress={() => {
              // this.setState({ selectedIndex: index });
              this.setState({ isShowModal: !this.state.isShowModal });
            }}>
            <Text>
              Xem thêm
            </Text>
          </TouchableOpacity>
          <View style={{ flexDirection: "row" }}>
            <Text
              style={{ fontSize: 10, fontWeight: '200', width: "50%" }}
            >
              Bộ sưu tập
          </Text>
            <TouchableOpacity style={{ width: "50%" }}>
              <Text style={{ fontSize: 10, textAlign: "right" }}>
                Xem thêm >
            </Text>
            </TouchableOpacity>
            <FlatList
              horizontal={true}
              data={this.props.data}
              renderItem={({ item, index }) =>
                this.renderItemBoSuuTap(item, index)
              }
              keyExtractor={(item) => "keybst" + item.id}
            />
          </View>
        </View>
      </View>
    )
  };

  renderItemBoSuuTap = (item, index) => {
    return (
      <View
        style={{
          width: 100,
          height: 90,
          marginTop: 10,
          borderWidth: 1,
          borderRadius: 5,
          borderColor: "#eae8e8",
          paddingLeft: 5,
          paddingRight: 5,
          paddingBottom: 5,
          marginRight: 5,
          marginBottom: 10,
        }}
      >
        <TouchableOpacity
          style={{ alignItems: "center" }}
          onPress={() => {
            // this.setState({ selectedIndex: index });
            this.setState({ isShowModal: !this.state.isShowModal });
          }}
        >
          <Image
            source={{ uri: `${this.props.urlImage + item.HINH_ANH}` }}
            style={{ width: 40, height: 40 }}
            resizeMode={"stretch"}
          />
          <ControlText
            style={{
              textAlign: "center",
              color: this.state.selectedIndex === index ? "red" : "black",
              fontSize: 8,
            }}
          >
            {item.TEN_LOAI}
          </ControlText>
        </TouchableOpacity>
      </View>
    );
  };

  onPress = () => {
    debounce(() => {
      // To do something

    }, 400);
  }

  async loadDataTheLoai() {
    try {
      await AsyncStorage.getItem('token').then((value) => {
        this.setState({ token: JSON.parse(value).data });
      });

      var headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${this.state.token}`
      }

      await axios({
        method: 'GET',
        url: `${this.state.urlApi}GetAllDmTheLoai`,
        headers: headers
      }).then((response) => {
        console.log('!!!!loadDataTheLoai!!!!')
        console.log('DATA', response.data)
        this.setState({ data: response.data })
      }
      ).catch(function (error) {
        console.log("HomeScreen loadDataTheLoai ERROR\n")
        console.log(error);
      });;
    } catch (error) {
      console.log("HomeScreen loadDataTheLoai ERROR\n")
      console.log(error);
    }
  }

  renderItemTheLoai = (item, index) => {
    return (
      <View
        key={"TL_" + item.Id}
        style={{
          width: 100,
          height: 90,
          marginTop: 10,
          borderWidth: 1,
          borderRadius: 5,
          borderColor: "#eae8e8",
          paddingLeft: 5,
          paddingRight: 5,
          paddingBottom: 5,
          marginRight: 5,
          marginBottom: 10,
        }}
      >
        <TouchableOpacity
          style={{ alignItems: "center" }}
          onPress={debounce(() => {
            console.log('ID pass', item.Id);
            this.props.navigation.navigate('ProductDetail'
              , {
                GroupId: item.Id
              })
          }, 100)}
        >
          <Image
            source={{ uri: `${this.state.urlImage + item.HINH_ANH}` }}
            style={{ width: 40, height: 40 }}
            resizeMode={"stretch"}
          />
          <ControlText
            style={{
              textAlign: "center",
              color: this.state.selectedIndex === index ? "red" : "black",
              fontSize: 8,
            }}
          >
            {item.TEN_LOAI}
          </ControlText>
          {/* <View style={{ flexDirection: "row", alignContent: "space-between" }}>
            <TouchableOpacity onPress={() => this.down(item)}>
              <ControlText>GIAM</ControlText>
            </TouchableOpacity>
            <ControlText>{item.count || 0}</ControlText>
            <TouchableOpacity onPress={() => this.up(item)}>
              <ControlText>TANG</ControlText>
            </TouchableOpacity>
          </View> */}

        </TouchableOpacity>
      </View>
    );
  };

  up = (item) => {
    const data = this.state.data || [];
    for (let i = 0; i < data.length; i++) {
      if (item.Id === data[i].Id) {
        data[i].count = (data[i].count || 0) + 1;
        this.setState({ data: data });
        return;
      }
    }
  }

  down = (item) => {
    const data = this.state.data || [];
    for (let i = 0; i < data.length; i++) {
      if (item.Id === data[i].Id) {
        data[i].count = (data[i].count || 0) - 1;
        this.setState({ data: data });
        return;
      }
    }
  }

  renderTab = (a) => {
    return (
      <View>
        <View
          style={{
            height: 10,
            width: "100%",
            backgroundColor: "#eeeeee",
          }}
        ></View>
        <View
          style={{ marginTop: 16, flexDirection: "row", width: "100%" }}
        >
          {a.map((item, index) => {
            return (
              <TouchableOpacity
                style={{
                  width: `${100 / a.length}%`,
                  alignItems: "center",
                  marginRight: 10,
                }}
                onPress={() => {
                  this.setState({ tabIndex: index });
                }}
                key={'Tab_' + index}
              >
                <ControlText
                  style={{
                    color:
                      this.state.tabIndex === index ? "red" : "black",
                    fontSize: 10,
                  }}
                >
                  {item}
                </ControlText>

                <View
                  style={{
                    width: "50%",
                    height: 1,
                    backgroundColor:
                      this.state.tabIndex === index
                        ? "red"
                        : "transparent",
                  }}
                ></View>
              </TouchableOpacity>
            );
          })}
        </View>
      </View>
    )
  }
  onCitySelected = (city) => {
    this.setState({ city: city });
  };

  render() {
    const images = [
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg",
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg",
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg",
    ];

    const arrayTab = ["Gần tôi", "Bán chạy", "Đánh giá"];
    //images.push()
    return (

      <SafeAreaView style={{ flex: 1, backgroundColor: "#f0f9ff", width: "100%", height: "100%" }}>

        <CustomHeader
          title="Trang chủ"
          isHome={true}
          navigation={this.props.navigation}
        />
        <View style={AppStyle.homeView}>
          <View style={AppStyle.searchView}>
            <TouchableOpacity style={AppStyle.buttonSearch}>
              <Text
                style={{
                  color: "gray",
                  paddingLeft: 10,
                  fontSize: 10,
                }}
              >
                Tìm kiếm
              </Text>
            </TouchableOpacity>

            {/* button chọn thành phố */}
            <TouchableOpacity
              onPress={() => {
                this.props.navigation.navigate("Search", {
                  onCitySelected: this.onCitySelected,
                });
              }}
              style={AppStyle.buttonCity}
            >
              <View style={AppStyle.viewCity}>
                <Text
                  style={{
                    color: "gray",
                    paddingLeft: 10,
                    fontSize: 10,
                  }}
                >
                  {this.state.city}
                </Text>
                <View style={AppStyle.viewImageCity}>
                  <Image
                    source={IMAGE.ICON_DOWNARROW}
                    style={AppStyle.imageCity}
                  ></Image>
                </View>
              </View>
            </TouchableOpacity>
            {/* end button chọn thành phố */}
          </View>

          {/* Vị trí */}
          <View style={AppStyle.location}>
            <TouchableOpacity style={AppStyle.buttonLocation}>
              <View style={AppStyle.locationView}>
                <View style={AppStyle.imageLocationView}>
                  <Image
                    source={IMAGE.ICON_LOCATION}
                    style={AppStyle.imageLocation}
                  />
                </View>

                <Text style={AppStyle.locationText}>{this.state.address}</Text>
                <View style={AppStyle.imageLocationViewNext}>
                  <Image
                    source={IMAGE.ICON_NEXTARROW}
                    style={AppStyle.imageLocationNext}
                  />
                </View>
              </View>
            </TouchableOpacity>
          </View>
          {/* End vị trí */}

          <ScrollView>
            <SliderBox
              images={images}
              parentWidth={width - 16 - 16}
              sliderBoxHeight={158}
              // onCurrentImagePressed={index =>
              //   this.controller.onBannerItemPress(banners[index])
              // }
              dotColor="#D8A962"
              inactiveDotColor="#D8D8D8"
              autoplay
              circleLoop
              resizeMethod={"resize"}
              resizeMode={"stretch"}
              dotStyle={{
                width: 5,
                height: 5,
                borderRadius: 0,
              }}
              ImageComponentStyle={{ borderRadius: 5 }}
              imageLoadingColor="#D8A962"
            />

            <View style={{ width: "100%" }}>
              <FlatList
                horizontal={true}
                data={this.state.data}
                renderItem={({ item, index }) =>
                  this.renderItemTheLoai(item, index)
                }
                keyExtractor={(item, index) => "keyTl" + index}
              />

              {this.renderBoSuuTap()}

              {this.renderTab(arrayTab)}

            </View>
          </ScrollView>
        </View>
        {this.state.isShowLoading ? (
          <View
            style={{
              width: "100%",
              height: "100%",
              position: "absolute",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <ActivityIndicator size="large" color="#0000ff" />
          </View>
        ) : null}
        {/* <Modal
          style={{height: "90%"}}
          animationType="slide"
          visible={this.state.isShowModal}>
          <View>
            <ControlText>{"Ban co muon thanh toan khong ?"}</ControlText>
            <View style={{ flexDirection: "row" }}>
              <TouchableOpacity style={{ width: "50%" }}>
                <ControlText>{"Ok"}</ControlText>
              </TouchableOpacity>
              <TouchableOpacity style={{ width: "50%" }}>
                <ControlText>{"Huy"}</ControlText>
              </TouchableOpacity>
            </View>
          </View>
        </Modal> */}
      </SafeAreaView>
    );
  }
}
