import React, { Component } from "react";
import {
  Text,
  View,
  SafeAreaView,
  Image,
  TouchableOpacity,
  ScrollView,
  FlatList,
  Dimensions,
  TextInput,
  ActivityIndicator,
  Alert
} from "react-native";
import AsyncStorage from '@react-native-community/async-storage';
import { CustomHeader } from "../index";
import ControlText from "../component/ControlText";
import { SliderBox } from "react-native-image-slider-box";
const { width } = Dimensions.get("window");
import * as Progress from "react-native-progress";
import Geolocation from "@react-native-community/geolocation";
import OneSignal from "react-native-onesignal";
import AppStyle from "../style";
import { IMAGE } from "../constant/Image";
import PushNotification from "react-native-push-notification";
// import PushNotificationIOS from "@react-native-community/push-notification-ios";

export class HomeScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      data: [],
      city: "HN",
      isShowLoading: false,
      selectedIndex: 0,
      tabIndex: 0,
      latitude: undefined,
      longitude: undefined,
      address: "",
      urlApi: "http://192.168.1.227:8090/api/Home/"
    };
    OneSignal.init("4cf4ecb2-f26f-4e80-b4f4-49c48d27e04d");
    OneSignal.addEventListener("received", this.onReceived);
    OneSignal.addEventListener("opened", this.onOpened);
    OneSignal.addEventListener("ids", this.onIds);
  }

  async componentDidMount() {
    try {
      Geolocation.requestAuthorization();
      Geolocation.getCurrentPosition(
        async position => {
          console.log(position.coords);
          this.setState({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          });
          console.log("initialPosition", this.state.latitude);
          const address = await fetch(
            `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.coords.latitude},${position.coords.longitude}&key=AIzaSyCue0oSx3xls6KhVXuBoquyO-AsUySAmJE`
          );
          let json = await address.json();
          console.log("address", json.results[0].formatted_address);
          if (json.results[0]) {
            this.setState({ address: json.results[0].formatted_address });
          }
        },
        error => Alert.alert("Error", JSON.stringify(error)),
        { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
      );

      this.loadDataTheLoai();
    } catch (error) {
      Alert.alert("componentDidMount Error", error);
    }
  }

  onOpened(openResult) {
    console.log("Message: ", openResult.notification.payload.body);
    console.log("Data: ", openResult.notification.payload.additionalData);
    console.log("openResult: ", openResult);
  }

  onReceived(notification) {
    console.log("Notification received: ", notification);
    PushNotification.localNotification({
      // /* Android Only Properties */
      // id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      // ticker: "My Notification Ticker", // (optional)
      // autoCancel: true, // (optional) default: true
      // largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
      // smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
      // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
      // subText: "This is a subText", // (optional) default: none
      // color: "red", // (optional) default: system default
      // vibrate: true, // (optional) default: true
      // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      // group: "group", // (optional) add group to message
      // ongoing: false, // (optional) set whether this is an "ongoing" notification
      // priority: "high", // (optional) set notification priority, default: high
      // visibility: "private", // (optional) set notification visibility, default: private
      // importance: "high", // (optional) set notification importance, default: high

      /* iOS only properties */
      // alertAction: // (optional) default: view
      // category: // (optional) default: null
      // userInfo: // (optional) default: null (object containing additional notification data)

      /* iOS and Android properties */
      title: notification.payload.title, // (optional)
      message: notification.payload.subtitle, // (required)
      playSound: true, // (optional) default: true
      soundName: "default" // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
      // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
      // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
  }

  onIds(device) {
    console.log("Device info: ", device);
  }

  async loadDataTheLoai() {
    try {
      console.log("url", `${this.state.urlApi}GetAllDmTheLoai`);
      const response = await fetch(`${this.state.urlApi}GetAllDmTheLoai`);
      let json = await response.json();
      this.setState({ data: json });
    } catch (error) {
      Alert.alert("Load the loai loi:", error);
    }
  }

  renderItem = (item, index) => {
    return (
      <View
        key={index}
        style={{ width: 100, alignItems: "center", paddingTop: 10 }}
      >
        <TouchableOpacity
          style={{ width: 100, alignItems: "center" }}
          onPress={() => {
            this.setState({ selectedIndex: index });
          }}
        >
          <Image
            source={{ uri: item.Image }}
            style={{ width: 40, height: 40 }}
            resizeMode={"stretch"}
          />
          <ControlText
            style={{
              textAlign: "center",
              color: this.state.selectedIndex === index ? "red" : "black"
            }}
          >
            {item.TEN_LOAI}
          </ControlText>
        </TouchableOpacity>
      </View>
    );
  };

  onCitySelected = city => {
    this.setState({ city: city });
  };

  render() {
    const images = [
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg",
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg",
      "https://scx1.b-cdn.net/csz/news/800/2019/2-nature.jpg"
    ];

    const a = ["Gan toi", "Ban chay", "Danh gia"];
    //images.push()
    return (
      <SafeAreaView style={{ flex: 1, backgroundColor: '#f0f9ff' }}>
        <CustomHeader
          title="Trang chủ"
          isHome={true}
          navigation={this.props.navigation}
        />
        <View style={AppStyle.homeView}>
          <View style={AppStyle.searchView}>
            <TouchableOpacity style={AppStyle.buttonSearch}>
              <Text
                style={{
                  color: "gray",
                  paddingLeft: 10,
                  fontSize: 10
                }}
              >
                Tìm kiếm
              </Text>
            </TouchableOpacity>

            {/* button chọn thành phố */}
            <TouchableOpacity
              onPress={() => {
                this.props.navigation.navigate("Search", {
                  onCitySelected: this.onCitySelected
                });
              }}
              style={AppStyle.buttonCity}
            >
              <View style={AppStyle.viewCity}>
                <Text
                  style={{
                    color: "gray",
                    paddingLeft: 10,
                    fontSize: 10
                  }}
                >
                  {this.state.city}
                </Text>
                <View style={AppStyle.viewImageCity}>
                  <Image
                    source={IMAGE.ICON_DOWNARROW}
                    style={AppStyle.imageCity}
                  ></Image>
                </View>
              </View>
            </TouchableOpacity>
            {/* end button chọn thành phố */}
          </View>

          {/* Vị trí */}
          <View style={AppStyle.location}>
            <TouchableOpacity style={AppStyle.buttonLocation}>
              <View style={AppStyle.locationView}>
                <View style={AppStyle.imageLocationView}>
                  <Image
                    source={IMAGE.ICON_LOCATION}
                    style={AppStyle.imageLocation}
                  />
                </View>

                <Text style={AppStyle.locationText}>{this.state.address}</Text>
                <View style={AppStyle.imageLocationViewNext}>
                  <Image
                    source={IMAGE.ICON_NEXTARROW}
                    style={AppStyle.imageLocationNext}
                  />
                </View>
              </View>
            </TouchableOpacity>
          </View>
          {/* End vị trí */}

          <ScrollView>
            <SliderBox
              images={images}
              parentWidth={width - 16 - 16}
              sliderBoxHeight={158}
              // onCurrentImagePressed={index =>
              //   this.controller.onBannerItemPress(banners[index])
              // }
              dotColor="#D8A962"
              inactiveDotColor="#D8D8D8"
              autoplay
              circleLoop
              resizeMethod={"resize"}
              resizeMode={"stretch"}
              dotStyle={{
                width: 5,
                height: 5,
                borderRadius: 0
              }}
              ImageComponentStyle={{ borderRadius: 5 }}
              imageLoadingColor="#D8A962"
            />
            <View style={{ width: "100%" }}>
              <FlatList
                horizontal={true}
                data={this.state.data}
                renderItem={({ item, index }) => this.renderItem(item, index)}
                keyExtractor={(item, index) => "key" + item.id}
              />
              <View
                style={{ marginTop: 16, flexDirection: "row", width: "100%" }}
              >
                {a.map((item, index) => {
                  return (
                    <TouchableOpacity
                      style={{
                        width: `${100 / a.length}%`,
                        alignItems: "center"
                      }}
                      onPress={() => {
                        this.setState({ tabIndex: index });
                      }}
                      key={index}
                    >
                      <ControlText
                        style={{
                          color: this.state.tabIndex === index ? "red" : "black"
                        }}
                      >
                        {item}
                      </ControlText>
                      <View
                        style={{
                          width: "100%",
                          height: 1,
                          backgroundColor:
                            this.state.tabIndex === index
                              ? "red"
                              : "transparent"
                        }}
                      ></View>
                    </TouchableOpacity>
                  );
                })}
              </View>
            </View>
          </ScrollView>
        </View>
        {this.state.isShowLoading ? (
          <View
            style={{
              width: "100%",
              height: "100%",
              position: "absolute",
              alignItems: "center",
              justifyContent: "center"
            }}
          >
            <ActivityIndicator size="large" color="#0000ff" />
          </View>
        ) : null}
      </SafeAreaView>
    );
  }
}
